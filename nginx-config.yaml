apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    worker_processes 1;
    pid /run/nginx.pid;
    worker_rlimit_nofile 131072;
    pcre_jit on;
    events {
        multi_accept        on;
        worker_connections  64;
        use                 epoll;
    }
    http {
        server_tokens       off;
        real_ip_header      X-Forwarded-For;
        set_real_ip_from    0.0.0.0/0;
        real_ip_recursive   on;
        sendfile            on;
        aio                 threads;
        tcp_nopush          on;
        tcp_nodelay         on;
        log_subrequest      on;
        reset_timedout_connection on;
        keepalive_timeout 75s;
        types_hash_max_size 2048;
        server_names_hash_max_size 512;
        server_names_hash_bucket_size 64;
        default_type text/html;
        gzip on;
        gzip_comp_level 5;
        gzip_http_version 1.1;
        gzip_min_length 256;
        gzip_types application/atom+xml application/javascript aplication/x-javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/svg+xml image/x-icon text/css text/plain text/x-component;
        gzip_proxied any;
        client_max_body_size "1m";
        log_format upstreaminfo '$remote_addr - '
            '[$proxy_add_x_forwarded_for] - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" '
            '$request_length $request_time $upstream_addr $upstream_response_length $upstream_response_time $upstream_status';
        map $request $loggable {
            default 1;
        }
        access_log /var/log/nginx/access.log upstreaminfo if=$loggable;
        error_log  /var/log/nginx/error.log notice;
        map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
        }
        # trust http_x_forwarded_proto headers correctly indicate ssl offloading
        map $http_x_forwarded_proto $pass_access_scheme {
            default $http_x_forwarded_proto;
            ''      $scheme;
        }
        # Map a response error watching the header Content-Type
        map $http_accept $httpAccept {
            default          html;
            application/json json;
            application/xml  xml;
            text/plain       text;
        }
        map $httpAccept $httpReturnType {
            default          text/html;
            json             application/json;
            xml              application/xml;
            text             text/plain;
        }
        server_name_in_redirect off;
        port_in_redirect off;
        ssl_protocols TLSv1.2;
        # turn on session caching to drastically improve performance
        ssl_session_cache builtin:1000 shared:SSL:10m;
        ssl_session_timeout 10m;
        # allow configuring ssl session tickets
        ssl_session_tickets on;
        # slightly reduce the time-to-first-byte
        ssl_buffer_size 4k;
        # allow configuring custom ssl ciphers
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:!DSS:!3DES:!RSA';
        ssl_prefer_server_ciphers on;
        # In case of errors try the next upstream server before returning an error
        proxy_next_upstream                     error timeout invalid_header http_502 http_503 http_504;
        upstream hug-apiserver-8000 {
            least_conn;
            server localhost:8000 max_fails=0 fail_timeout=0;
        }
        server {
            server_name _;
            listen 80;
            listen 443  ssl http2;
            # PEM sha: e22c4f483232beafc311e749ec7af78ec7aff6ca
            ssl_certificate /mnt/tls.crt;
            ssl_certificate_key /mnt/tls.key;
            location ~* /hug {
                # enforce ssl on server side
                if ($scheme = http) {
                    return 301 https://$host$request_uri;
                }
                proxy_set_header Host                   $host;
                # Pass Real IP
                proxy_set_header X-Real-IP              $remote_addr;
                # Allow websocket connections
                proxy_set_header                        Upgrade           $http_upgrade;
                proxy_set_header                        Connection        $connection_upgrade;
                proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Host       $host;
                proxy_set_header X-Forwarded-Port       $server_port;
                proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
                # mitigate HTTPoxy Vulnerability
                # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
                proxy_set_header Proxy                  "";
                proxy_connect_timeout                   5s;
                proxy_send_timeout                      60s;
                proxy_read_timeout                      60s;
                proxy_redirect                          off;
                proxy_buffering                         off;
                proxy_http_version                      1.1;
                rewrite /hug/(.*) /$1 break;
                rewrite /hug / break;
                proxy_pass http://hug-apiserver-8000;
            }
            # this is required to avoid error if nginx is being monitored
            # with an external software (like sysdig)
            location /nginx_status {
                allow 127.0.0.1;
                deny all;
                access_log off;
                stub_status on;
            }
        }
        # default server for services without endpoints
        server {
            listen 8181;
            location / {
                return 503;
            }
        }
    }
    stream {
    # TCP services
    # UDP services
    }
